diff -urdw /home/fab/build/cdrtools-3.00/libfile/libfile.com /home/fab/build/cdrtools-3.00-patched/libfile/libfile.com
--- /home/fab/build/cdrtools-3.00/libfile/libfile.com	2004-01-13 10:14:44.000000000 +0100
+++ /home/fab/build/cdrtools-3.00-patched/libfile/libfile.com	2010-06-30 21:48:58.808190275 +0200
@@ -1,4 +1,4 @@
-$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_VIDEO","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
+$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_AUD_VID","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
 $ incs = "/include=([-.include],[-.libhfs_iso],[-.cdrecord],[])"
 $ opts = "/float=ieee/prefix=all"
 $ define/nolog scg [-.LIBSCG.scg]
diff -urdw /home/fab/build/cdrtools-3.00/libhfs_iso/libhfs_iso.com /home/fab/build/cdrtools-3.00-patched/libhfs_iso/libhfs_iso.com
--- /home/fab/build/cdrtools-3.00/libhfs_iso/libhfs_iso.com	2004-01-13 10:15:04.000000000 +0100
+++ /home/fab/build/cdrtools-3.00-patched/libhfs_iso/libhfs_iso.com	2010-06-30 21:50:40.880202855 +0200
@@ -1,4 +1,4 @@
-$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_VIDEO","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
+$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_AUD_VID","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
 $ incs = "/include=([-.include],[-.libhfs_iso],[-.cdrecord],[])"
 $ opts = "/float=ieee/prefix=all"
 $ define/nolog scg [-.LIBSCG.scg]
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/build_mkisofs.com /home/fab/build/cdrtools-3.00-patched/mkisofs/build_mkisofs.com
--- /home/fab/build/cdrtools-3.00/mkisofs/build_mkisofs.com	2004-01-13 10:16:02.000000000 +0100
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/build_mkisofs.com	2010-06-30 21:52:24.752215779 +0200
@@ -1,4 +1,4 @@
-$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_VIDEO","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
+$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_AUD_VIDEO","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
 $ incs = "/include=([-.include],[-.libhfs_iso],[-.cdrecord],[])"
 $ opts = "/float=ieee/prefix=all"
 $ define/nolog scg [-.LIBSCG.scg]
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/dvd_file.c /home/fab/build/cdrtools-3.00-patched/mkisofs/dvd_file.c
--- /home/fab/build/cdrtools-3.00/mkisofs/dvd_file.c	2009-11-25 20:23:09.000000000 +0100
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/dvd_file.c	2010-06-30 22:16:02.504395535 +0200
@@ -5,9 +5,9 @@
 	"@(#)dvd_file.c	1.11 09/11/25 joerg";
 #endif
 /*
- * DVD_VIDEO code
+ * DVD_AUD_VID code
  *  Copyright (c) 2002 Olaf Beck - olaf_sc@yahoo.com
- *  Copyright (c) 2002-2009 Jörg Schilling <schilling@fokus.gmd.de>
+ *  Copyright (c) 2002-2009 JÃ¶rg Schilling <schilling@fokus.gmd.de>
  */
 /*
  * This program is free software; you can redistribute it and/or modify
@@ -24,7 +24,7 @@
  * Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
 
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 
 #include "mkisofs.h"
 #include <schily/schily.h>
@@ -698,4 +698,4 @@
 	}
 }
 
-#endif /*DVD_VIDEO*/
+#endif /*DVD_AUD_VID*/
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/dvd_reader.c /home/fab/build/cdrtools-3.00-patched/mkisofs/dvd_reader.c
--- /home/fab/build/cdrtools-3.00/mkisofs/dvd_reader.c	2009-11-25 20:34:09.000000000 +0100
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/dvd_reader.c	2010-06-30 21:56:56.103770456 +0200
@@ -6,10 +6,10 @@
 #endif
 /*
  * Copyright (C) 2001, 2002 Billy Biggs <vektor@dumbterm.net>,
- *                          Håkan Hjort <d95hjort@dtek.chalmers.se>,
+ *                          HÃ¥kan Hjort <d95hjort@dtek.chalmers.se>,
  *                          Olaf Beck <olaf_sc@yahoo.com>
  *			    (I only did the cut down no other contribs)
- *			    Jörg Schilling <schilling@fokus.gmd.de>
+ *			    JÃ¶rg Schilling <schilling@fokus.gmd.de>
  *			    (making the code portable)
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -36,7 +36,7 @@
  * DON'T USE THIS LIBRARY IN ANY OTHER PROGRAM GET THE REAL
  * LIBDVDREAD INSTEAD
  */
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 
 #include "mkisofs.h"
 #include <schily/fcntl.h>
@@ -289,4 +289,4 @@
 	return (dvd_file->filesize);
 }
 
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/ifo_read.c /home/fab/build/cdrtools-3.00-patched/mkisofs/ifo_read.c
--- /home/fab/build/cdrtools-3.00/mkisofs/ifo_read.c	2009-11-25 20:55:25.000000000 +0100
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/ifo_read.c	2010-06-30 22:15:58.160395523 +0200
@@ -6,7 +6,7 @@
 #endif
 /*
  * Copyright (C) 2002 Olaf Beck <olaf_sc@yahoo.com>
- * Copyright (C) 2002-2009 Jörg Schilling <schilling@fokus.gmd.de>
+ * Copyright (C) 2002-2009 JÃ¶rg Schilling <schilling@fokus.gmd.de>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -33,7 +33,7 @@
  * DON'T USE THIS LIBRARY IN ANY OTHER PROGRAM GET THE REAL
  * LIBDVDREAD INSTEAD
  */
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 
 #include "mkisofs.h"
 #include <schily/fcntl.h>
@@ -452,4 +452,4 @@
 	free(ifofile);
 	ifofile = 0;
 }
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/joliet.c /home/fab/build/cdrtools-3.00-patched/mkisofs/joliet.c
--- /home/fab/build/cdrtools-3.00/mkisofs/joliet.c	2010-05-24 11:32:06.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/joliet.c	2010-06-30 22:21:09.968434810 +0200
@@ -1146,7 +1146,7 @@
 	if (strcmp(lpnt, "..") == 0)
 		return (1);
 
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 	/*
 	 * There're rumors claiming that some players assume VIDEO_TS.IFO
 	 * to be the first file in VIDEO_TS/ catalog. Well, it's basically
@@ -1159,7 +1159,7 @@
 	 * XXX to the UDF implementation if we implement decent UDF support
 	 * XXX with a separate name space for the UDF file tree.
 	 */
-	if (dvd_video) {
+	if (dvd_aud_vid_flag & DVD_SPEC_VIDEO) {
 		if (strcmp(rpnt, "VIDEO_TS.IFO") == 0)
 			return (-1);
 		if (strcmp(lpnt, "VIDEO_TS.IFO") == 0)
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/Makefile /home/fab/build/cdrtools-3.00-patched/mkisofs/Makefile
--- /home/fab/build/cdrtools-3.00/mkisofs/Makefile	2009-07-13 20:09:40.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/Makefile	2010-06-30 22:22:47.992475993 +0200
@@ -31,7 +31,7 @@
 CPPOPTS +=	-DAPPLE_HFS_HYB
 CPPOPTS +=	-DAPPLE_HYB
 CPPOPTS +=	-DUDF
-CPPOPTS +=	-DDVD_VIDEO
+CPPOPTS +=	-DDVD_AUD_VID
 CPPOPTS +=	-DSORTING
 CPPOPTS +=	-I../libscg
 CPPOPTS +=	-I../libscgcmd
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/mkisofs.8 /home/fab/build/cdrtools-3.00-patched/mkisofs/mkisofs.8
--- /home/fab/build/cdrtools-3.00/mkisofs/mkisofs.8	2010-05-25 03:02:44.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/mkisofs.8	2010-06-30 23:33:27.191786391 +0200
@@ -785,14 +785,26 @@
 .IR mode .
 Specifying this option automatically enables Rock Ridge extensions.
 .TP
+.B \-dvd\-audio
+Generate DVD-Audio compliant UDF file system. This is done by sorting the
+order of the content of the appropriate files and by adding padding
+between the files if needed.  Sorting only works if the DVD-Audio filenames
+include upper case characters only.
+.sp
+Note that in order to get a DVD-Audio compliant filesystem image, you need
+to prepare a DVD-Audio compliant directory tree. This means you need to
+have a directory AUDIO_TS (all caps) in the root directory of the resulting DVD
+and you should have a directory VIDIO_TS. The directory AUDIO_TS needs to
+include all needed files (file names must be all caps) for a compliant DVD-Audio
+filesystem.
+.TP
+.B \-dvd\-hybrid
+Equivalent to selecting both -dvd-audio and -dvd-video
+.TP
 .B \-dvd\-video
 Generate DVD-Video compliant UDF file system. This is done by sorting the
-order of the content of the appropriate files and by adding padding 
-between the files if needed.
-Note that the sorting only works if the DVD-Video filenames include upper case
-characters only.
-.br
-.br
+order of the content of the appropriate files and by adding padding.
+.sp
 Note that in order to get a DVD-Video compliant filesystem image, you need
 to prepare a DVD-Video compliant directory tree. This means you need to
 have a directory VIDEO_TS (all caps) in the root directory of the resulting DVD
@@ -3148,6 +3160,11 @@
 .PP
 There are probably all sorts of strange results possible with
 combinations of the hide options ...
+.PP
+To create a DVD-Audio of the DVD-Audio compliant source directory
+.IR DVD :
+.PP
+% mkisofs \-o dvda.iso \-dvd\-audio DVD
 
 .SH AUTHOR
 .br
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/mkisofs.c /home/fab/build/cdrtools-3.00-patched/mkisofs/mkisofs.c
--- /home/fab/build/cdrtools-3.00/mkisofs/mkisofs.c	2010-04-25 16:29:03.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/mkisofs.c	2010-06-30 22:35:37.819770175 +0200
@@ -293,10 +293,14 @@
 int	create_udfsymlinks = 1;	/* include symlinks in UDF	*/
 #endif
 
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
+int	dvd_audio = 0;
+int	dvd_hybrid = 0;
 int	dvd_video = 0;
+int	dvd_aud_vid_flag = DVD_SPEC_NONE;
 #endif
 
+
 #ifdef SORTING
 int	do_sort = 0;		/* sort file data */
 #endif /* SORTING */
@@ -928,7 +932,11 @@
 	"Do not reate symbolic links on UDF image"},
 #endif
 
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
+	{{"dvd-audio", &dvd_audio },
+	"Generate DVD-Audio compliant UDF file system"},
+	{{"dvd-hybrid", &dvd_hybrid },
+	"Generate a hybrid (DVD-Audio and DVD-Video) compliant UDF file system"},
 	{{"dvd-video", &dvd_video },
 	"Generate DVD-Video compliant UDF file system"},
 #endif
@@ -1275,7 +1283,9 @@
 	error("	-J, -joliet		Generate Joliet directory information\n");
 	error("	-print-size		Print estimated filesystem size and exit\n");
 	error("	-UDF			Generate UDF file system\n");
+	error("	-dvd-audio		Generate DVD-Audio compliant UDF file system\n");
 	error("	-dvd-video		Generate DVD-Video compliant UDF file system\n");
+	error("	-dvd-hybrid		Generate a hybrid (DVD-Audio/DVD-Video) compliant UDF file system\n");
 	error("	-iso-level LEVEL	Set ISO9660 level (1..3) or 4 for ISO9660 v 2\n");
 	error("	-V ID, -volid ID	Set Volume ID\n");
 	error("	-graft-points		Allow to use graft points for filenames\n");
@@ -1659,7 +1669,7 @@
 	if (help)
 		usage(0);
 	if (pversion) {
-		printf("mkisofs %s (%s-%s-%s) Copyright (C) 1993-1997 Eric Youngdale (C) 1997-2010 Jörg Schilling\n",
+		printf("mkisofs %s (%s-%s-%s) Copyright (C) 1993-1997 Eric Youngdale (C) 1997-2010 JÃ¶rg Schilling\n",
 			version_string,
 			HOST_CPU, HOST_VENDOR, HOST_OS);
 #ifdef	OPTION_SILO_BOOT
@@ -1715,6 +1725,13 @@
 		}
 	}
 #endif
+#ifdef DVD_AUD_VID
+
+	dvd_aud_vid_flag = (dvd_audio ? DVD_SPEC_AUDIO : 0)
+			| (dvd_hybrid ? DVD_SPEC_HYBRD : 0)
+			| (dvd_video ? DVD_SPEC_VIDEO : 0);
+
+#endif
 
 	if (abstract) {
 		if (strlen(abstract) > 37) {
@@ -1952,8 +1969,8 @@
 	if (ucs_level < 1 || ucs_level > 3)
 		comerrno(EX_BAD, "Illegal UCS Level %d, use 1..3.\n",
 						ucs_level);
-#ifdef	DVD_VIDEO
-	if (dvd_video) {
+#ifdef	DVD_AUD_VID
+	if (dvd_aud_vid_flag) {
 		if (!use_udf)
 			rationalize_udf++;
 	}
@@ -2207,10 +2224,14 @@
 	 * XXX This is a hack until we have a decent separate name handling
 	 * XXX for UDF filenames.
 	 */
-	if (dvd_video && use_Joliet) {
+#ifdef DVD_AUD_VID
+
+	if (dvd_aud_vid_flag && use_Joliet) {
 		use_Joliet = 0;
-		error("Warning: Disabling Joliet support for DVD-Video.\n");
+		error("Warning: Disabling Joliet support for DVD-Video/DVD-Audio.\n");
 	}
+#endif
+
 	if (use_udf && !use_Joliet)
 		jlen = 255;
 
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/mkisofs.h /home/fab/build/cdrtools-3.00-patched/mkisofs/mkisofs.h
--- /home/fab/build/cdrtools-3.00/mkisofs/mkisofs.h	2010-04-25 16:29:03.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/mkisofs.h	2010-07-01 00:14:00.583769166 +0200
@@ -23,7 +23,6 @@
  */
 
 /* APPLE_HYB James Pearson j.pearson@ge.ucl.ac.uk 23/2/2000 */
-
 #include <schily/mconfig.h>	/* Must be before stdio.h for LARGEFILE support */
 #include <schily/stdio.h>
 #include <schily/stat.h>
@@ -36,7 +35,7 @@
 #include <schily/libport.h>
 #include "scsi.h"
 
-#ifdef	DVD_VIDEO
+#ifdef	DVD_AUD_VID
 #ifndef	UDF
 #define	UDF
 #endif
@@ -203,7 +202,7 @@
 extern struct output_fragment hfs_desc;
 
 #endif	/* APPLE_HYB */
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 /*
  * This structure holds the information necessary to create a valid
  * DVD-Video image. Basically it's how much to pad the files so the
@@ -230,7 +229,7 @@
 	int		num_titles;
 	title_set_t	*title_set;
 } title_set_info_t;
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
 
 /*
  * This structure describes one complete directory.  It has pointers
@@ -379,9 +378,17 @@
 #define	JLONGMAX	103	/* out of spec Joliet file name length */
 extern int	jlen;		/* selected maximum Joliet file name length */
 
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
+
+#define DVD_SPEC_NONE  0x0
+#define DVD_SPEC_VIDEO 0x1
+#define DVD_SPEC_AUDIO 0x2
+#define DVD_SPEC_HYBRD (DVD_SPEC_VIDEO | DVD_SPEC_AUDIO)
+extern int	dvd_audio;
+extern int	dvd_hybrid;
 extern int	dvd_video;
-#endif /* DVD_VIDEO */
+extern int	dvd_aud_vid_flag;
+#endif /* DVD_AUD_VID */
 
 
 #ifdef APPLE_HYB
@@ -827,3 +834,4 @@
 #if !defined(HAVE_MEMMOVE) && !defined(memmove)
 #define	memmove(s1, s2, n)	movebytes(s2, s1, n)
 #endif
+
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/tree.c /home/fab/build/cdrtools-3.00-patched/mkisofs/tree.c
--- /home/fab/build/cdrtools-3.00/mkisofs/tree.c	2010-05-24 11:31:22.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/tree.c	2010-06-30 22:39:40.352576151 +0200
@@ -1873,7 +1873,7 @@
 	 */
 	s_entry->sort = this_dir->sort;
 
-#ifdef  DVD_VIDEO
+#ifdef  DVD_AUD_VID
 	/*
 	 * No use at all to do a sort if we don't make a dvd video/audio
 	 */
@@ -1887,7 +1887,7 @@
 	 * sort_matches would slow things to a crawl.
 	 */
 
-	if (dvd_video) {
+	if (dvd_aud_vid_flag) {
 		s_entry->sort = assign_dvd_weights(s_entry->name, this_dir, s_entry->sort);
 		/*
 		 * Turn on sorting if necessary, regardless of cmd-line options
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/udf.c /home/fab/build/cdrtools-3.00-patched/mkisofs/udf.c
--- /home/fab/build/cdrtools-3.00/mkisofs/udf.c	2009-07-09 00:25:26.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/udf.c	2010-07-01 00:13:46.227891951 +0200
@@ -2161,64 +2161,302 @@
  * This sparce information makes me conclude that they don't need any
  * weight. This obviously needs to be tested.
  */
-EXPORT int
-assign_dvd_weights(name, this_dir, val)
+
+/* ================================================================================================= */
+/*    DVD-Audio patch                                                                                */
+/* ==================================================================================================*/
+
+/*
+ * sorts support for DVD-Audio and DVD-Video for mkisofs
+ *
+ * Written by Jerome Brock, adpated by Fabrice Nicol to cdrtools-3.00
+ *
+ * (This is a rewrite of the assign_dvd_weights function in cdrtools)
+ */
+
+
+
+#if __GNUC__ < 2
+#define inline
+#endif
+
+/* ///////////////////////////////////////////////////// */
+
+struct ts_info_rec {
+	int num;
+	int sub;
+} ts_info;
+
+/* ///////////////////////////////////////////////////// */
+
+#define is_ascii_digit(c) \
+	((c >= '0') && (c <= '9'))
+
+#define get_digit_from_char(c) \
+	(c - '0')
+
+#define get_ts_num(name) \
+	(get_digit_from_char(name[4]) * 10 + get_digit_from_char(name[5]))
+
+#define get_ts_sub_num(name) \
+	(get_digit_from_char(name[7]))
+
+/* the end of arrays containing a "" signal value */
+#define list_end(val) (val[0] == 0)
+
+/* ///////////////////////////////////////////////////// */
+
+/*
+ * Parses a string representing an {Audio,Video} Title Set
+ *
+ * Examples would be: VTS_12_0.IFO, ATS_03_4.AOB, VTS_24_0.BUP
+ *
+ * If the string parses correctly, then this function fills structure
+ * pointed to by the info parameter with the parsed information and
+ * returns a pointer to the same structure
+ *
+ * returns NULL on failure
+ */
+LOCAL __attribute__((always_inline)) struct ts_info_rec*
+parse_ts_info  __PR((const char *name, struct ts_info_rec *info));
+
+LOCAL __attribute__((always_inline)) struct ts_info_rec*
+parse_ts_info(name, info)
+	const char *name;
+	struct ts_info_rec *info;
+{
+	if(!(is_ascii_digit(name[4]) && is_ascii_digit(name[5]) && is_ascii_digit(name[7])))
+		return NULL;
+
+	info->num =  get_ts_num(name);
+	info->sub = get_ts_sub_num(name);
+
+	/* legal track numbers are 01-99 */
+	if(info->num == 0)
+		return NULL;
+
+	/* only title set object files can have a non-zero sub */
+	if((strcmp(name+9, "OB") == 0) && (info->sub != 0))
+		return NULL;
+
+	return info;
+}
+
+/* ///////////////////////////////////////////////////// */
+
+/*
+ * Searchs array for a string.
+ *
+ * The array must contain an empty string, i.e. "", to signal
+ * that the end of the array has been reached
+ *
+ * returns the index of the found string, or -1 if not found
+*/
+LOCAL inline int
+search_array __PR((const char *const array[], const char *str));
+
+LOCAL inline int
+search_array(array, str)
+	const char *const array[];
+	const char *str;
+{
+	int idx = 0;
+	const char *curr = array[idx];
+
+	while (!list_end(curr) && strncmp(str, curr, strlen(curr)) != 0)
+		curr = array[++idx];
+
+	return list_end(curr) ? -1 : idx;
+}
+
+/* ///////////////////////////////////////////////////// */
+
+#define MAX_INFO_SIZE 3
+
+struct dvd_spec_section_rec {
+	/* using "" as end of list marker */
+	const char *const pre[MAX_INFO_SIZE + 1]; /* valid file prefixes in sorts order */
+	const char *const ext[MAX_INFO_SIZE + 1]; /* valid file extensions in sorts order */
+};
+
+struct dvd_spec_dir_rec {
+	const char *const name; /* directory name supported by this spec */
+	const int spec; /* the dvd_spec that this dir supports, i.e. DVD_SPEC_* flags */
+	const struct dvd_spec_section_rec dvd_spec_section[2]; /* [0]=non-ts [1]=ts */
+};
+
+static const struct dvd_spec_dir_rec dvd_spec_dirs[] =
+{  /* top-level entries (dvd_spec_dir_rec's) are in sorts order */
+	{
+	  "AUDIO_TS",
+	  ( DVD_SPEC_AUDIO | DVD_SPEC_HYBRD ),
+	  {
+	    {
+	      {"AUDIO_PP", "AUDIO_TS", "AUDIO_SV", ""},
+	      {".IFO", ".VOB", ".BUP", ""},
+	    },
+	    {
+	      {"ATS_", ""},
+	      {".IFO", ".AOB", ".BUP", ""},
+	    },
+	  },
+	},
+	{
+	  "VIDEO_TS",
+	 ( DVD_SPEC_VIDEO | DVD_SPEC_HYBRD ),
+	  {
+	    {
+	      {"VIDEO_TS", ""},
+	      {".IFO", ".VOB", ".BUP", ""},
+	    },
+	    {
+	      {"VTS_", ""},
+	      {".IFO", ".VOB", ".BUP", ""},
+	    },
+	  },
+	},
+};
+
+#define DVD_SPEC_DIRS_QTY (sizeof dvd_spec_dirs / sizeof dvd_spec_dirs[0])
+
+/* ///////////////////////////////////////////////////// */
+
+/*
+ * This function assigns weights to DVD-Audio and DVD-Video filenames
+ *
+ * The weights ensure that the files will be correctly ordered on the
+ * finished dvd.  The actual weight values are not important in the
+ * absolute sense, i.e. it is not true that file X1 "must" have a
+ * value of Y1.  What is important is that the relative weight values
+ * maintain the ordering below, i.e. if file X1 is higher on the list
+ * than file X2, then Y1 > Y2.
+ *
+ * Current ordering (and values):
+ *
+ * /AUDIO_TS/AUDIO_PP.IFO   20000
+ * /AUDIO_TS/AUDIO_TS.IFO   19997
+ * /AUDIO_TS/AUDIO_TS.VOB   19996
+ * /AUDIO_TS/AUDIO_TS.BUP   19995
+ * /AUDIO_TS/AUDIO_SV.IFO   19994
+ * /AUDIO_TS/AUDIO_SV.VOB   19993
+ * /AUDIO_TS/AUDIO_SV.BUP   19992
+ * /AUDIO_TS/ATS_01_0.IFO   19970
+ * /AUDIO_TS/ATS_01_0.AOB   19960
+ *           :               :
+ * /AUDIO_TS/ATS_01_9.AOB   19951
+ * /AUDIO_TS/ATS_01_0.BUP   19950
+ *           :               :
+ * /AUDIO_TS/ATS_99_0.BUP   17010
+ *           :               :
+ *           :               :
+ *           :               :
+ * /VIDEO_TS/VIDEO_TS.IFO   15000
+ * /VIDEO_TS/VIDEO_TS.VOB   14999
+ * /VIDEO_TS/VIDEO_TS.BUP   14998
+ * /VIDEO_TS/VTS_01_0.IFO   14970
+ * /VIDEO_TS/VTS_01_0.VOB   14960
+ *           :               :
+ * /VIDEO_TS/VTS_01_9.VOB   14951
+ * /VIDEO_TS/VTS_01_0.BUP   14950
+ *           :               :
+ * /VIDEO_TS/VTS_99_0.BUP   12010
+ *
+ * This ensures that DVD-Audio and Video files are laid out properly on the disc.
+ *
+ * Note: JACKET_P files would be easy to add (if they require special sorts handling)
+*/
+int assign_dvd_weights __PR((char *name, struct directory *this_dir, int val));
+
+EXPORT
+int assign_dvd_weights(name, this_dir, val)
 	char			*name;
 	struct directory	*this_dir;
 	int			val;
 {
-	int ts_number;
-	int segment;
-	int audio;
+	const int SORT_BASE = 20000;
+	const int SORT_TYPE_SIZE = 5000;
 
-	if (name[0] != 'A' && name[0] != 'V')
+	/* worst case for PREFIX_SIZE, is
+	 *
+	 *  {Audio,Video} Object Set for Title,
+	 *   i.e. {A,B}TS_dd_0.VOB - {A,B}TS_dd_9.VOB
+	 *
+	 * so we will allow that much sorts number space for each prefix
+	 *
+	 * EXTENSION_QTY can't possibly be greater than the space we allocated to store the extensions
+	 */
+	const int PREFIX_SIZE = 10;
+	const int EXTENSION_QTY = MAX_INFO_SIZE;
+	const int TS_SIZE = EXTENSION_QTY * PREFIX_SIZE;
+
+	const struct dvd_spec_dir_rec *dir_spec = NULL;
+	const struct dvd_spec_section_rec *curr_section = NULL;
+
+	unsigned int sort_type_index = 0;
+	int prefix_index = 0;
+	int extension_index = 0;
+	int is_ts_file = 0;
+	int found = 0;
+	int offset = 0;
+	int sort_type_offset = 0;
+
+	if (this_dir->parent != root)
 		return (val);
 
-	if (memcmp(name, "VIDEO_TS", 8) == 0) {
-		ts_number = 0;
-		audio = 0;
-	} else if (memcmp(name, "VTS_", 4) == 0) {
-		ts_number = 1;
-		audio = 0;
-	} else if (memcmp(name, "AUDIO_TS", 8) == 0) {
-		ts_number = 0;
-		audio = 1;
-	} else if (memcmp(name, "ATS_", 4) == 0) {
-		ts_number = 1;
-		audio = 1;
-	} else {
+	if (strlen(name) != 12)
 		return (val);
+
+	for (sort_type_index = 0; sort_type_index < DVD_SPEC_DIRS_QTY; sort_type_index++) {
+		if (!(dvd_aud_vid_flag & dvd_spec_dirs[sort_type_index].spec))
+			continue;
+
+		if (strcmp(this_dir->de_name, dvd_spec_dirs[sort_type_index].name) != 0)
+			continue;
+
+		dir_spec = &dvd_spec_dirs[sort_type_index];
+
+		/* check for a ts file first since its most likely */
+		for (is_ts_file = 1; is_ts_file >= 0; is_ts_file--) {
+
+			curr_section = &(dir_spec->dvd_spec_section[is_ts_file]);
+
+			if ((prefix_index = search_array(curr_section->pre, name)) == -1)
+				continue;
+
+			if ((extension_index = search_array(curr_section->ext, name+8)) == -1)
+				continue;
+
+			found = 1;
+			goto done_searching;  /* break out of both for loops */
+		}
 	}
+	done_searching:
 
-	if (this_dir->parent != root ||
-	    strcmp(this_dir->de_name, "VIDEO_TS") != 0)
+	if (!found)
 		return (val);
 
-	if (ts_number == 0) {
-		segment = 0;
-	} else {
-		if (name[4] >= '0' && name[4] <= '9' &&
-		    name[5] >= '0' && name[5] <= '9' &&
-		    name[6] == '_' &&
-		    name[7] >= '0' && name[7] <= '9') {
-			ts_number = name[4] * 10 + name[5] - ('0' * 11);
-			segment = name[7] - '0';
-		} else {
+	if (is_ts_file && (parse_ts_info(name, &ts_info) == NULL))
 			return (val);
+
+	if (is_ts_file) {
+		offset = (ts_info.num * TS_SIZE) + (extension_index * PREFIX_SIZE) + ts_info.sub;
 		}
+	else {
+		/*
+		 * Since title set numbers start at 01,  we use the space for the "illegal" 00
+		 * ts to store the non-ts files.
+		 */
+		offset = (prefix_index * EXTENSION_QTY) + extension_index;
 	}
 
-	if (strcmp(name+8, audio ? ".AOB" : ".VOB") == 0) {
-		return (audio * 10000 - ts_number * 12 - segment + 11198);
-	} else if (strcmp(name+8, ".IFO") == 0) {
-		return (audio * 10000 - ts_number * 12 + 11199);
-	} else if (strcmp(name+8, ".BUP") == 0) {
-		return (audio * 10000 - ts_number * 12 + 11188);
-	} else {
-		return (val);
-	}
+	sort_type_offset = sort_type_index * SORT_TYPE_SIZE;
+
+	return (SORT_BASE - (offset + sort_type_offset));
 }
 
+
+
+
 #ifndef	ENAMETOOLONG
 #define	ENAMETOOLONG	EINVAL
 #endif
diff -urdw /home/fab/build/cdrtools-3.00/mkisofs/write.c /home/fab/build/cdrtools-3.00-patched/mkisofs/write.c
--- /home/fab/build/cdrtools-3.00/mkisofs/write.c	2010-06-01 22:15:39.000000000 +0200
+++ /home/fab/build/cdrtools-3.00-patched/mkisofs/write.c	2010-07-01 00:05:25.699922122 +0200
@@ -38,7 +38,7 @@
 #include <schily/errno.h>
 #include <schily/schily.h>
 #include <schily/checkerr.h>
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 #include "dvd_reader.h"
 #include "dvd_file.h"
 #include "ifo_read.h"
@@ -606,17 +606,17 @@
 		}
 
 
-#ifndef DVD_VIDEO
-#define	dvd_video	0
+#ifndef DVD_AUD_VID
+#define	dvd_aud_vid_flag0
 #endif
 
 #ifndef APPLE_HYB
 #define	apple_hyb	0
 #endif
 
-#if	defined(APPLE_HYB) || defined(DVD_VIDEO)
+#if	defined(APPLE_HYB) || defined(DVD_AUD_VID)
 
-		if ((apple_hyb && !donotwrite_macpart) || dvd_video) {
+		if ((apple_hyb && !donotwrite_macpart) || (dvd_aud_vid_flag & DVD_SPEC_VIDEO)) {
 			/*
 			 * we may have to pad out ISO files to work with HFS
 			 * clump sizes
@@ -629,7 +629,7 @@
 
 			last_extent_written += dwpnt->pad;
 		}
-#endif	/* APPLE_HYB || DVD_VIDEO */
+#endif	/* APPLE_HYB || DVD_AUD_VID */
 
 
 		dwnext = dwpnt;
@@ -1008,15 +1008,15 @@
 		set_733((char *)s_entry->isorec.extent, start_extent);
 
 		start_extent += ISO_BLOCKS(s_entry->size);
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 		/*
 		 * Shouldn't this be done for every type of sort? Otherwise
 		 * we will loose every pad info we add if we sort the files
 		 */
-		if (dvd_video) {
+		if (dvd_aud_vid_flag & DVD_SPEC_VIDEO) {
 			start_extent += dwpnt->pad;
 		}
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
 
 		/* cache start extents for any linked files */
 		add_hash(s_entry);
@@ -1038,7 +1038,7 @@
 	struct file_hash *s_hash;
 	struct deferred_write *dwpnt;
 	char		whole_path[PATH_MAX];
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 	char		dvd_path[PATH_MAX];
 	title_set_info_t *title_set_info = NULL;
 	char	*p;
@@ -1046,8 +1046,8 @@
 	BOOL	ret = FALSE;
 
 	while (dpnt) {
-#ifdef DVD_VIDEO
-		if (dvd_video && root == dpnt->parent &&
+#ifdef DVD_AUD_VID
+		if ((dvd_aud_vid_flag & DVD_SPEC_VIDEO) && root == dpnt->parent &&
 		    ((p = strstr(dpnt->whole_name, "VIDEO_TS")) != 0)&&
 					strcmp(p, "VIDEO_TS") == 0) {
 			int	maxlen = strlen(dpnt->whole_name)-8+1;
@@ -1063,13 +1063,13 @@
 				/*
 				 * Do not switch off -dvd-video but let is fail later.
 				 */
-/*				dvd_video = 0;*/
+/*				dvd_aud_vid_flag &= ~DVD_SPEC_VIDEO;*/
 				errmsgno(EX_BAD, "Unable to parse DVD-Video structures.\n");
 			} else {
 				ret = TRUE;
 			}
 		}
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
 
 		for (s_entry = dpnt->contents; s_entry;
 						s_entry = s_entry->next) {
@@ -1156,7 +1156,7 @@
 						break;
 					finddir = finddir->next;
 					if (!finddir) {
-#ifdef	DVD_VIDEO
+#ifdef	DVD_AUD_VID
 						if (title_set_info != 0) {
 							DVDFreeFileSet(title_set_info);
 						}
@@ -1234,8 +1234,8 @@
 				/* set the initial padding to zero */
 				dwpnt->pad = 0;
 				dwpnt->dw_flags = 0;
-#ifdef DVD_VIDEO
-				if (dvd_video && (title_set_info != 0)) {
+#ifdef DVD_AUD_VID
+				if ((dvd_aud_vid_flag & DVD_SPEC_VIDEO) && (title_set_info != 0)) {
 					int pad;
 
 					pad = DVDGetFilePad(title_set_info, s_entry->name);
@@ -1252,7 +1252,7 @@
 							"The pad was %d for file %s\n", dwpnt->pad, s_entry->name);
 					}
 				}
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
 #ifdef APPLE_HYB
 				/*
 				 * maybe an offset to start of the real
@@ -1353,12 +1353,12 @@
 				}
 #endif
 #endif	/* APPLE_HYB */
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 				/* Shouldn't we always add the pad info? */
-				if (dvd_video) {
+				if (dvd_aud_vid_flag & DVD_SPEC_VIDEO) {
 					last_extent += dwpnt->pad;
 				}
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
 				if (verbose > 2) {
 					fprintf(stderr, "%u %d %s\n",
 						s_entry->starting_block,
@@ -1411,15 +1411,15 @@
 		}
 		dpnt = dpnt->next;
 	}
-#ifdef DVD_VIDEO
+#ifdef DVD_AUD_VID
 	if (title_set_info != NULL) {
 		DVDFreeFileSet(title_set_info);
 	}
-	if (dvd_video && !ret && !isnest) {
+	if ((dvd_aud_vid_flag & DVD_SPEC_VIDEO)&& !ret && !isnest) {
 		errmsgno(EX_BAD,
 			"Could not find correct 'VIDEO_TS' directory.\n");
 	}
-#endif /* DVD_VIDEO */
+#endif /* DVD_AUD_VID */
 	return (ret);
 } /* assign_file_addresses(... */
 
@@ -2384,8 +2384,8 @@
 #endif	/* APPLE_HYB */
 
 	if (!assign_file_addresses(root, FALSE)) {
-#ifdef DVD_VIDEO
-		if (dvd_video) {
+#ifdef DVD_AUD_VID
+		if (dvd_aud_vid_flag & DVD_SPEC_VIDEO) {
 			comerrno(EX_BAD, "Unable to make a DVD-Video image.\n");
 		}
 #else
diff -urdw /home/fab/build/cdrtools-3.00/readcd/build_readcd.com /home/fab/build/cdrtools-3.00-patched/readcd/build_readcd.com
--- /home/fab/build/cdrtools-3.00/readcd/build_readcd.com	2004-01-13 10:16:17.000000000 +0100
+++ /home/fab/build/cdrtools-3.00-patched/readcd/build_readcd.com	2010-06-30 23:44:46.719769059 +0200
@@ -1,4 +1,4 @@
-$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_VIDEO","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
+$ defs = "/define=("USE_LARGEFILES","ABORT_DEEP_ISO_ONLY","APPLE_HYB","UDF","DVD_AUD_VID","SORTING","USE_LIBSCHILY","USE_SCG","HAVE_DIRENT_H","HAVE_STRCASECMP")
 $ incs = "/include=([-.include],[-.libhfs_iso],[-.cdrecord],[])"
 $ opts = "/float=ieee/prefix=all/nowarn"
 $ define/nolog scg [-.LIBSCG.scg]
